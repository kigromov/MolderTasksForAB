// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AlfaBankTestTasks.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Step arguments")]
    public partial class StepArgumentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Step arguments.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Step arguments", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Table arguments")]
        [NUnit.Framework.CategoryAttribute("passed")]
        public virtual void TableArguments()
        {
            string[] tagsOfScenario = new string[] {
                    "passed"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Table arguments", null, tagsOfScenario, argumentsOfScenario);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2"});
#line 7
    testRunner.Given("Step with table", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3"});
#line 11
    testRunner.Given("Step with table", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table5.AddRow(new string[] {
                            "width",
                            "10"});
#line 15
    testRunner.Given("Step with table", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "gender",
                            "age"});
                table6.AddRow(new string[] {
                            "John",
                            "Smith",
                            "male",
                            ""});
#line 20
    testRunner.Given("Step with table", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "attribute",
                            "value"});
                table7.AddRow(new string[] {
                            "width",
                            "10"});
                table7.AddRow(new string[] {
                            "length",
                            "20"});
                table7.AddRow(new string[] {
                            "height",
                            "5"});
#line 25
    testRunner.Given("Step with table", ((string)(null)), table7, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "param",
                            "value"});
                table8.AddRow(new string[] {
                            "width",
                            "10"});
                table8.AddRow(new string[] {
                            "length",
                            "20"});
                table8.AddRow(new string[] {
                            "height",
                            "5"});
#line 32
    testRunner.Given("Step with table", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "surname",
                            "gender",
                            "age"});
                table9.AddRow(new string[] {
                            "John",
                            "Smith",
                            "male",
                            "30"});
                table9.AddRow(new string[] {
                            "\"Mary\",\"Ann\"",
                            "Jane;",
                            "female",
                            "25"});
                table9.AddRow(new string[] {
                            "",
                            "",
                            "",
                            ""});
                table9.AddRow(new string[] {
                            "Eric",
                            "Cartman",
                            ",",
                            ",,"});
#line 39
    testRunner.Given("Step with table", ((string)(null)), table9, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiline arguments")]
        [NUnit.Framework.CategoryAttribute("passed")]
        public virtual void MultilineArguments()
        {
            string[] tagsOfScenario = new string[] {
                    "passed"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiline arguments", null, tagsOfScenario, argumentsOfScenario);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
    testRunner.Given("Step with params: 123", @"<fetch version=""1.0"" output-format=""xml-platform"" mapping=""logical"" distinct=""true"">
  <entity name=""xts_consumptiontaxdetail"">
	<attribute name=""xts_effectivestartdate"" />
	<attribute name=""xts_consumptiontaxid"" />
	<attribute name=""xts_rate"" />
	<order attribute=""xts_effectivestartdate"" descending=""true"" />
	<filter type=""and"">
	  <condition attribute=""xts_effectivestartdate"" operator=""on-or-before"" value=""@vehiclePrice.xts_effectivestartdate"" />
	  <condition attribute=""xts_consumptiontaxid"" operator=""eq"" value=""@vehiclePriceDetail.xts_consumptiontax1id"" />
	</filter>			
  </entity>
</fetch>", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
